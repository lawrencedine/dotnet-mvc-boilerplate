
# directory where all the artifacts created by the build script are placed.
deploy.dir = ${basedir}/deploy

# files from the project are placed into this folder so the files can
# be manipulated to created a more performant project.
intermediate.dir = ${deploy.dir}/intermediate

# files from the published project that is ready to be placed into a
# production environment are placed in this directory.
publish.dir = ${deploy.dir}/publish

# directory that reports created from testing are saved to.
test.reports.dir = ${deploy.dir}/test-reports

# directory where tools that are used throughout the build script
# are located.
tools.dir = ${basedir}/build/tools

# YUICompressor is used to minify css & js files.
tool.yuicompressor = ${tools.dir}/yuicompressor/yuicompressor-2.4.7.jar

# lessc converts .less files into .css files.
tool.lessc = ${tools.dir}/lessc/lessc.cmd

# exe that can optimise png files.
tool.optipng = ${tools.dir}/optipng-0.7-win32/optipng.exe

# java class that is used to compress images losslessly.
tool.smushit = ${tools.dir}/smushit/smushit.jar

# rhino allows us to run js in java.
tool.rhino = ${tools.dir}/rhino/rhino.jar

# tool used to perform css linting on the project.
tool.csslint = ${tools.dir}/csslint/csslint-rhino.js

# a NAnt build file is required in order to automate .NET related
# tasks such as utilising MSBuild & running NUnit test runner.
nant.buildfile = ${basedir}/build/dotnet-tasks.build

# directory where the main web project lives.
project.dir = ${basedir}/DotnetMvcBoilerplate

# name of the directory that stores the css files.
css.dir = css

# name of the directory that stores the less files.
less.dir = less

# directory that contains all the images
images.dir = images

# directory that contains all the optimised images.
optimised.images.dir = optimised-images

# name of the directory that stores the js files.
js.dir = js

# name of the directory that stores third party js library files.
js.libs.dir = /${js.dir}/libs

# name of the client side javascript library that is used to convert
# .less files into .css files during development. The build script will
# remove the script tag that contains this library, as the deployed 
# version of the website will not place a dependency on the user havign
# JavaScript enabled.
less.js.file = less-1.3.0.min.js

# name of the default stylesheet that will ultimately be a concatenation
# of all the other css & less files that make up the websites styles.
default.stylesheets.file = style.css

# length of the filenames used for cache busting with the js & css files.
hash.length = 7

# Comma seperated list of all the stylesheets that should be concatenated
# into a single css file (the default.stylehseet.file) and then have the
# <link> tag that is associated to the stylesheet removed from the HTML.
included.stylesheets = normalize.css,master.less.css

# Comma seperated list of all the .less stylesheets that should be converted
# into css stylesheets. Their <link> tags are modified so the url points at
# the css version of the stylesheet. Hense why in the default example the 
# master.less.css is the included stylesheet and not the master.less.
included.less.stylesheets = master.less
 
# Comma seperated list of all the pages that should have their HTML checked
# for manipulation to ensure that the css & js for a page is all loaded with
# one request.
page-files = Views/Shared/_Page.cshtml